Checkers Notes:
Game state can be measured by adding number of each players peices

Functions:
	Get available moves
	Evaluate value of result
	min
	max
	Move
	jump


[-1, 0,-1, 0,-1, 0,-1, 0]
[ 0,-1, 0,-1, 0,-1, 0,-1]
[-1, 0,-1, 0,-1, 0,-1, 0]
[ 0, 0, 0, 0, 0, 0, 0, 0]
[ 0, 0, 0, 0, 0, 0, 0, 0]
[ 1, 0, 1, 0, 1, 0, 1, 0]
[ 0, 1, 0, 1, 0, 1, 0, 1]
[ 1, 0, 1, 0, 1, 0, 1, 0]// edges 0,0 7,7

empty = 0
man = 1
king = 2

empty = 0
man = -1
king = -2


Check for jumps
	If jumps are available list only available jumps.
	If no jumps are available list all possible moves

if -1
	[0,0],[0,2],[0,4], [0,6]
	[1,1],[1,3],[1,5], [1,7]
	[2,0],[1,2],[1,4], [1,6]

if 1
jump
if(+1,-1  && isEmpty(+2,-2) or -1,-1 && isEmpty(-2,-2))
[+2,-2] or [-2,-2]

move
[+1,-1] or [-1,-1]

if -

[, 0,-1, 0,-1, 0,-1, 0]
[ 0,-1, 0,-1, 0,-1, 0,-1]
[-1, 0,-1, 0,-1, 0,-1, 0]
[ 0, 0, 0, 0, 0, 0, 0, 0]
[ 0, 0, 0, 0, 0, 0, 0, 0]
[ 1, 0, 1, 0, 1, 0, 1, 0]
[ 0, 1, 0, 1, 0, 1, 0, 1]
[ 1, 0, 1, 0, 1, 0, 1, 0]


 1▓▓ 2▓▓ 3▓▓ 4▓▓
▓▓ 5▓▓ 6▓▓ 7▓▓ 8
 9▓▓10▓▓11▓▓12▓▓
▓▓13▓▓14▓▓15▓▓16
17▓▓18▓▓19▓▓20▓▓
▓▓21▓▓22▓▓23▓▓24
25▓▓26▓▓27▓▓28▓▓
▓▓29▓▓30▓▓31▓▓32


#Black Jumps
#even row
	+9 and +7

#odd row
	+9 and +7
#Left end can't jump left
#right end can't jump right
+


#Black Moves
#odd row
if((position/4)%2 == 0) && (position % 4 == 1)
	#Handle peice can go up right(+4)
	return P+4
if if((position/4)%2 == 0)
	return p+4, p+3


#even row
if((position/4)%2 == 1):
	return p+5, p+4


if((position/4)%2 == 1) && (position % 4 == 0)
	#Handle peice can go up right(+4)
		return P+4



if (position % 4 != 0)
	upLeft = (((position/4)%2)*(-1) + 5 + position

if(position % 4 != 1)
	upRight = ((position/4)%2)*(-1) + 4 + position


White Moves
	#odd row
	if((position/4)%2 == 0) && (position % 4 == 1)
		#Handle peice can go up right(+4)
		return P-4

	if if((position/4)%2 == 0)
		return p-4, p-3


	#even row
	if((position/4)%2 == 1):
		return p-5, p-4


	if((position/4)%2 == 1) && (position % 4 == 0)
		#Handle peice can go up right(+4)
			return P-4



	if (position % 4 != 0)
		upLeft = (((position/4)%2)*(1) - 5 + position

	if(position % 4 != 1)
		upRight = ((position/4)%2)*(1) - 4 + position





CheckJumpLeft
	ifupleft !isVacant && landing left isVacant && notOnLeft
	SETJUMPFLAGfdfd
	then
		Add to available moves

CheckJumpRight
	ifupRight !isVacant && landing right isVacant && notOnRight
	SETJUMPFLAG
	then 
		Add to available moves


CheckUpRight
	!ifupRight && !JUMPFLAG
	then 
		Add to available moves

CheckUpLeft
	!ifupLeft && !JUMPFLAG
	then 
		Add to available moves







░░▓▓░░▓▓░░▓▓░░▓▓
▓▓░░▓▓░░▓▓░░▓▓░░
░░▓▓░░▓▓░░▓▓░░▓▓
▓▓░░▓▓░░▓▓░░▓▓░░
░░▓▓░░▓▓░░▓▓░░▓▓
▓▓░░▓▓░░▓▓░░▓▓░░
░░▓▓░░▓▓░░▓▓░░▓▓


▀█▄▐▒■▪▫▲

▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓
░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓
░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░▓▓▓▓▓▓▓▓░      ░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░
▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░
▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░
▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓░██████░▓▓▓▓▓▓▓▓
░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓░░░░░░░░▓▓▓▓▓▓▓▓









▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░
▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓░░░░░░




isLegalMove?
	checkForJumps
	checkMove
		move is in listMoved(node)y7

NODE:
	parent?
	Move
	Result
	Value



function minimax(node, depth, maximizingPlayer)
    if depth = 0 or node is a terminal node
        return the heuristic value of node
    if maximizingPlayer
        bestValue := -∞
        for each child of node
            val := minimax(child, depth - 1, FALSE)
            bestValue := max(bestValue, val)
        return bestValue
    else
        bestValue := +∞
        for each child of node
            val := minimax(child, depth - 1, TRUE)
            bestValue := min(bestValue, val)
        return bestValue


function bestMove(node, depth, maximizingPlayer)
    if depth = 0 or node is a terminal node
        return the heuristic value of node
    if maximizingPlayer
        bestValue := -∞
        for each child of node
            val := minimax(child, depth - 1, FALSE)
            bestNode := maxNode(bestValue, val)
        return bestNode
